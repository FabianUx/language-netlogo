scopeName: 'source.nlogo'
name: 'Netlogo'
fileTypes: ['nlogo', 'nls']
firstLineMatch: ''
foldingStartMarker: '\[\s*$'
foldingStopMarker: '^\s*\}'
patterns: [
    {
        include: '#comment'
    }
    {
        include: '#keyword'
    }
    {
        include: '#function'
    }
    {
        include: "#constant"
    }
    {
        include: "#strings"
    }
    {
        include: "#brackets"
    }
    {
        include: "#operators"
    }
    {
        include: "#parens"
    }
    {
        include: "#builtin_functions"
    }
]
repository:
    comment:
        patterns: [
            {
                begin: ';'
                beginCaptures: 'punctuation.definition.comment.netlogo'
                end: '$\\n?'
                name: 'comment.line.semicolon.netlogo'
            }
        ]
    keyword:
        patterns: [
            {
                match: '^\\s*(__includes)'
                name: 'keyword.control.import.netlogo'
            }
            {
                match: '^\\s*(globals|breed)\\s'
                name: 'storage.modifier.global.netlogo'
            }
            {
                match: '^\\s*(if|ifelse|ifelse-value)\\s'
                name: 'keyword.control.conditional.netlogo'
            }
            {
                match: '^\\s*(ask|ask-concurrent|foreach|loop|repeat|while|every|
                        with-local-randomness|without-interruption)\\s'
                name: 'keyword.control.repeat.netlogo'
            }
            {
                match: '^\\s*(end|report|stop|wait)\\s'
                name: 'keyword.control.statement.netlogo'
            }
            {
                match: '^\\s*(and|not|or|xor)\\s'
                name: 'keyword.operator.logical.netlogo'
            }
            {
                match: '^\\s*(error|error-message)\\s'
                name: 'keyword.control.exception.netlogo'
            }
            {
                match: '^\\s*(error|error-message)\\s'
                name: 'keyword.other.netlogo'
            }
        ]
    function:
        patterns: [
            {
                match: '^\\s*(to|to-report)\\s+(\\w+[-\\w]*)'#'\\s*\\[.*\\]'
                # match: '^\\s*(class)\\s+(?=[a-zA-Z_][-a-zA-Z_0-9]*\\s*\\'
                captures:
                    1:
                        name: 'storage.type.class.netlogo'
                    2:
                        name: 'entity.name.type.class.netlogo'

                name: 'meta.class.netlogo'
            }
        ]
    constant:
        patterns: [
            {
                match: '(?<=[\\s\\-\\+\\*\\/\\\\=:\\[\\(\\{,]|^)\\d*\\.?\\d+([eE][+-]?\\d)?([0-9&&[^\\.]])*(i|j)?\\b'
                name: 'constant.numeric.integer.netlogo'
            }
            {
                match: '(^|\\s)(true|false)(\\s|$)'
                name: 'constant.language.netlogo'
            }
        ]
    strings:
        begin: '\"'
        beginCaptures:
                0:
                        name: 'punctuation.definition.string.begin.netlogo'
        end: '\"'
        endCaptures:
                0:
                        name: 'punctuation.definition.string.end.netlogo'
        name: 'string.quoted.double.netlogo'
        patterns: [
            {
                match: '\\"'
                name: 'constant.character.escape.netlogo'
            }
        ]

    brackets:
        begin: "\\["
        beginCaptures:
            "0":
                name: "meta.brackets.netlogo"
        contentName: "meta.brackets.netlogo"
        end: "\\]"
        endCaptures:
            "0":
                name: "meta.brackets.netlogo"
        patterns: [
            {
                include: "$self"
            }
        ]

    operators:
        comment: "Operator symbols"
        match: "(?<=\\s)(=|!=|>|>=|<|<=|&|&&|:|\\||\\|\\||\\+|-|\\*|\\.\\*|/|\\./|\\\\|\\.\\\\|\\^|\\.\\^)(?=\\s)"
        name: "keyword.operator.symbols.netlogo"
    parens:
        begin: "\\("
        beginCaptures:
            "0":
                name: "meta.parens.netlogo"
        contentName: "meta.parens.netlogo"
        end: "\\)"
        endCaptures:
            "0":
                name: "meta.parens.netlogo"
        patterns: [
            {
                include: "#end_in_parens"
            }
            {
                include: "$self"
            }
        ]
    builtin_functions:
        patterns: [
            {
                match: '(?x)\\b(but-first|but-last|empty?|filter|first|fput|
                        lput|let|set|is-list?|histogram|item|last|length|list|
                        lput|map|member?|modes|n-of|n-values|of|position|one-of|
                        reduce|remove|remove-duplicates|remove-item|replace-item|
                        reverse|sentence|shuffle|sort|sort-by|sort-on|sublist)\\b'
                name: 'support.function.builtin.netlogo'
            }
        ]
